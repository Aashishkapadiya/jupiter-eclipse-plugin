package csdl.codereview.file;

import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.util.Date;

import junit.framework.TestCase;

import org.jdom.JDOMException;

import csdl.codereview.model.CodeReview;
import csdl.codereview.model.CodeReviewContentProviderModel;
import csdl.codereview.model.Disposition;
import csdl.codereview.model.Status;
import csdl.codereview.model.Type;
import csdl.codereview.util.CodeReviewComparator;

/**
 * @author Takuya Yamashita
 * @version $Id: TestCodeReviewXmlSerializer.txt,v 1.1.1.1 2003/10/24 02:34:41 takuyay Exp $
 */
public class TestCodeReviewXmlSerializer extends TestCase {
  
  private CodeReviewContentProviderModel model = new CodeReviewContentProviderModel();
  
  private File xmlFile;

  /*
   * @see TestCase#setUp()
   */
  protected void setUp() throws Exception {
    super.setUp();
    this.xmlFile = new File (System.getProperty("user.dir"), 
                             "build" + File.separator + "temp" + File.separator + "review.xml");
    CodeReview codeReview1 = new CodeReview(new Date(), new Date(),
                                           "takuyay", "This is the defect review.",
                                           "foo.bar.Baz", "bazMethod",
                                           "123", Type.DEFECT, "This is the defect test.",
                                           Disposition.FIX, Status.UNSOLVED);
    CodeReview codeReview2 = new CodeReview(new Date(), new Date(),
                                           "takuyay", "This is the question review.",
                                           "bar.baz.Foo", "fooMethod",
                                           "231", Type.QUESTION, "This is the question test.",
                                           Disposition.NO_PROBLEM, Status.SOLVED);
    this.model.add(codeReview1);
    this.model.add(codeReview2);
    
  }
  
  /**
   * Tests write method to write the information in the CodeReivewContentProvider instance
   * into a xml file. If this process is succeed, any exception should be not thrown.
   *
   */
  public void testWrite() {
    try {
      CodeReviewXmlSerializer.write(this.xmlFile, this.model);
    }
    catch (IOException e) {
      fail("Should not throw IOException: " + e.toString());
    }
  }
  
  /**
   * Tests read method to read the information in the xml file to fill it in the
   * CodeReviewContentProvider instance. After the model instance is created,
   * each element of the model is check to see the informations are actually read. 
   *
   */
  public void testRead() {
    CodeReviewContentProviderModel model = new CodeReviewContentProviderModel();
    try {
      CodeReviewXmlSerializer.read(this.xmlFile, model, null);
    }
    catch (JDOMException e) {
      fail("should not throw JDOMException." + e.toString());
    }
    catch (IOException e) {
      fail("should not throw IOException." + e.toString());
    } catch (ParseException e) {
      fail("should not throw ParseException." + e.toString());
    }
    model.sortBy(CodeReviewComparator.TYPE_COMPARATOR);
    Object[] objectArray = model.getElements(null);
    assertEquals("Testing the type of the first element", Type.DEFECT,
                 ((CodeReview) objectArray[0]).getType());
    assertEquals("Testing the type of the second element", Type.QUESTION, 
                 ((CodeReview) objectArray[1]).getType());
  }
}
