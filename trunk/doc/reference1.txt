 Return to On Markers CVS log 	 Up to [Technology_Project] / org.eclipse.stellation / plugins / org.eclipse.stellation.scm.vsf / doc	

  1 jwright 1.1 Markers
  2             
  3             Running notes about markers, annotations ,etc.
  4             
  5             Premise: Markers are an suitable (perhaps optimal) mechanism
  6             for delimiting fragments within a VSF.  Markers can be used to:
  7             a) easily generate a navigable outline view
  8             b) easily indicate a range of text (cf DefaultRangeIndicator)
  9             c) generate information in a task view, bookmark view etc.
 10             d) support persistent storage (by the platform).
 11             
 12             Eclipse provides support for 
 13             - subclassing markers
 14               (to add semi-arbitrary attributes of types Boolean, Integer, String),
 15             - attaching markers to resources (or locations within resources ....
 16               (what happens when resource is edited ???)
 17             - querying markers (by type, resource tree, etc.)
 18             - filtering by marker in various displays
 19             
 20             
 21             Drawbacks: markers are *not* normally visible to Team components
 22 jwright 1.1 or saved by them (they are persisted within Eclipse workspace .metadata).
 23             However, markers can be queried (by type) and persisted with Stellation
 24             team-private data (both locally and in a repository), so this should
 25             not be a problem in practice.
 26             
 27             Related Extension pointsPurpose
 28             org.eclipse.core.resources.markerdefine new marker type
 29             (see 3.7 in PlatformMiscRef.pdf)
 30             org.eclipse.ui.markerHelpassociate a help context id with a specific
 31             kind of marker (by type, att values) (3.27)
 32                 org.eclipse.ui.markerImageProvidersprovide image for marker; **not API**
 33                 Other plug-ins should not use this - rats! 
 34                 (3.28)
 35                 org.eclipse.ui.markerResolution    associate a marker resolution generator with
 36                 a particular kind of marker (3.29)
 37                 org.eclipse.ui.markerUpdatersregister marker update strategies with
 38             marker annotation models
 39             
 40             Re: providing a new image for a marker subtype - see Java breapoints: a Marker
 41             with a special annotation image
 42             
 43 jwright 1.1 AnnotationModel is important here.  What else?
 44             
 45             Subclass of AbstractMarkerAnnotationModel may be used to manage marker-based annotations
 46             for an editor.  4 methods must be defined: 
 47             retrieveMarkers, isAcceptable, deleteMarkers, listenToMarkerChanges
 48             
 49             Note: JDT CompilationUnitDocumentProvider has inner class 
 50             CompilationUnitAnnotationModel, based on ResourceMarkerAnnotationModel...
 51             
 52             ClassFileMarkerAnnotationModel is more useful - shows how to subclass
 53             AbstractMarkerAnnotationModel directly, in ways more relevant to VSF...
 54             
 55             note that protected method createMarkerAnnotation(IMarker)
 56             is overridden to return new JavaMarkerAnnotation(marker);
 57             
 58             Other relevant classes -- 
 59             MarkerRulerAction ??
 60             
 61             -----------------------------------------
 62             
 63             Setting markers -- how to set via ruler context menu ??
 64 jwright 1.1 
 65             Here's how JDT UI does it (from plugin.xml):
 66             
 67             <extension
 68             point="org.eclipse.ui.popupMenus">         
 69             <viewerContribution 
 70             id="org.eclipse.jdt.ui.CompilationUnitEditorPopupActions" 
 71             targetID="#CompilationUnitRulerContext">
 72             <action
 73             id="org.eclipse.ui.texteditor.TaskRulerAction"
 74             menubarPath="add"
 75             label="%AddTask.label"
 76             tooltip="%AddTask.tooltip"
 77                         helpContextId="org.eclipse.ui.AddTask_action_context"
 78             class="org.eclipse.ui.texteditor.TaskRulerAction">
 79             </action>
 80             <action
 81             id="org.eclipse.ui.texteditor.BookmarkRulerAction"
 82             menubarPath="add"
 83             label="%AddBookmark.label"
 84             tooltip="%AddBookmark.tooltip"
 85 jwright 1.1             helpContextId="org.eclipse.ui.bookmark_action_context"
 86             class="org.eclipse.ui.texteditor.BookmarkRulerAction">
 87             </action>
 88             </viewerContribution>
 89             </extension>
 90             
 91             
 92             The above viewerContribution works (in part) because the necessary context IDs
 93             are registered by the CompilationUnitEditor:
 94             
 95             public CompilationUnitEditor() {
 96             super();
 97             setDocumentProvider(JavaPlugin.getDefault().getCompilationUnitDocumentProvider());
 98             >setEditorContextMenuId("#CompilationUnitEditorContext"); //$NON-NLS-1$
 99             >>setRulerContextMenuId("#CompilationUnitRulerContext"); //$NON-NLS-1$
100             >setOutlinerContextMenuId("#CompilationUnitOutlinerContext"); //$NON-NLS-1$
101             // don't set help contextId, we install our own help context
102             fSavePolicy= null;
103             
104             fJavaEditorErrorTickUpdater= new JavaEditorErrorTickUpdater(this);
105             }
106 jwright 1.1 
107             
108             <extension point="org.eclipse.ui.editorActions">
109             <editorContribution
110             id="org.eclipse.ui.texteditor.ruler.actions"
111             targetID="org.eclipse.jdt.ui.CompilationUnitEditor">
112             
113             <action
114             id="org.eclipse.ui.texteditor.BookmarkRulerAction"
115             actionID="RulerDoubleClick"
116             label="%Dummy.label"
117                         helpContextId="org.eclipse.ui.bookmark_action_context"
118             class="org.eclipse.ui.texteditor.BookmarkRulerAction">
119             </action>
120                     <action
121                        id="org.eclipse.jdt.internal.ui.javaeditor.JavaSelectRulerAction"
122                        actionID="RulerClick"
123                        label="%Dummy.label"
124                        class="org.eclipse.jdt.internal.ui.javaeditor.JavaSelectRulerAction">
125                     </action>
126             </editorContribution>
127 jwright 1.1 </extension>
128             
129             
130             The above editorContribution apparently binds mouse click handlers for the ruler
131             to the desired action (for both double-click and single click)
132             JavaSelectRulerAction pops up a 'quick fix' dialog
133             BookmarkRulerAction may (?) be configured here to set a breakpoint marker?
134             
135             ! Not here, but in jdt.debug.ui --
136             
137             <extension point="org.eclipse.ui.editorActions">
138             <editorContribution
139             id="org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions"
140             targetID="org.eclipse.jdt.ui.CompilationUnitEditor">
141             <action
142             id="org.eclipse.jdt.ui.actions.ManageBreakpointRulerAction"
143             actionID="RulerDoubleClick"
144             label="%Dummy.label"
145             class="org.eclipse.jdt.internal.debug.ui.actions.ManageBreakpointRulerActionDelegate">
146             </action>
147             </editorContribution>
148 jwright 1.1 <editorContribution
149             id="org.eclipse.jdt.debug.ClassFileEditor.BreakpointRulerActions"
150             targetID="org.eclipse.jdt.ui.ClassFileEditor">
151             <action
152             id="org.eclipse.jdt.ui.actions.ManageBreakpointRulerAction"
153             actionID="RulerDoubleClick"
154             label="%Dummy.label"
155             class="org.eclipse.jdt.internal.debug.ui.actions.ManageBreakpointRulerActionDelegate">
156             </action>
157             </editorContribution>
158             </extension>
159             
160             The above xml affects both the CompilationUnitEditor and the ClassFileEditor.
161             In both cases, the ManageBreakpointRulerActionDelegate is the bound to RulerDoubleClick action
162             Hmm ... What about the popupMenu ??
163             
164             
165             <extension point="org.eclipse.ui.popupMenus">
166             ..... many contributions omitted
167             
168             
169 jwright 1.1   ** These two contributions insert Breakpoint UI into the Ruler popup menu for ClassFile 
170                  and CompilationUnit editors:
171                  
172             <viewerContribution 
173                 id="org.eclipse.jdt.debug.ui.ClassFileRulerPopupActions" 
174                 targetID="#ClassFileRulerContext">
175                 <action
176             id="org.eclipse.jdt.ui.actions.JavaBreakpointPropertiesRulerActionDelegate"
177             label="%JavaBreakpointProperties.label"
178             menubarPath="debug"
179             helpContextId="breakpoint_properties_action_context"
180             class="org.eclipse.jdt.internal.debug.ui.actions.JavaBreakpointPropertiesRulerActionDelegate">
181             </action>
182                 <action
183             id="org.eclipse.jdt.ui.actions.EnableDisableBreakpointRulerActionDelegate"
184             label="%EnableBreakpoint.label"
185             menubarPath="debug"
186             helpContextId="enable_disable_breakpoint_action_context"
187             class="org.eclipse.jdt.internal.debug.ui.actions.EnableDisableBreakpointRulerActionDelegate">
188             </action>
189             <action
190 jwright 1.1 id="org.eclipse.jdt.ui.actions.ManageBreakpointRulerActionDelegate"
191             label="%AddBreakpoint.label"
192             menubarPath="debug"
193             helpContextId="manage_breakpoint_action_context"
194             class="org.eclipse.jdt.internal.debug.ui.actions.ManageBreakpointRulerActionDelegate">
195             </action>
196             </viewerContribution>
197             <viewerContribution 
198                 id="org.eclipse.jdt.debug.ui.CompilationUnitRulerPopupActions" 
199                 targetID="#CompilationUnitRulerContext">
200                 <action
201             id="org.eclipse.jdt.ui.actions.JavaBreakpointPropertiesRulerActionDelegate"
202             label="%JavaBreakpointProperties.label"
203             menubarPath="debug"
204             helpContextId="breakpoint_properties_action_context"
205             class="org.eclipse.jdt.internal.debug.ui.actions.JavaBreakpointPropertiesRulerActionDelegate">
206             </action>
207             <action
208             id="org.eclipse.jdt.ui.actions.EnableDisableBreakpointRulerActionDelegate"
209             label="%EnableBreakpoint.label"
210             menubarPath="debug"
211 jwright 1.1 helpContextId="enable_disable_breakpoint_action_context"
212             class="org.eclipse.jdt.internal.debug.ui.actions.EnableDisableBreakpointRulerActionDelegate">
213             </action>
214             <action
215             id="org.eclipse.jdt.ui.actions.ManageBreakpointRulerActionDelegate"
216             label="%AddBreakpoint.label"
217             menubarPath="debug"
218             helpContextId="manage_breakpoint_action_context"
219             class="org.eclipse.jdt.internal.debug.ui.actions.ManageBreakpointRulerActionDelegate">
220             </action>
221             </viewerContribution>
222             
223               ** These two contributions insert Breakpoint UI into the main popup menu for ClassFile 
224                  and CompilationUnit editors:
225                  (note that 'Inspect', 'Display' and 'Run to Line' are visible in regular Java editor context menu;
226                  they're just disabled except while debugging.)
227             
228             <viewerContribution 
229                 id="org.eclipse.jdt.debug.ui.CUPopupActions" 
230                 targetID="#CompilationUnitEditorContext">
231                 <action id="org.eclipse.jdt.debug.ui.cuPopup.RunToLine"
232 jwright 1.1     label="%runToLineAction.label"
233                 icon="icons/full/clcl16/runtoline_co.gif"
234                 menubarPath="additions"
235                 helpContextId="run_to_line_action_context"
236                 class="org.eclipse.jdt.internal.debug.ui.actions.RunToLineActionDelegate"> 
237             </action>
238                 <action id="org.eclipse.jdt.debug.ui.cuPopup.Display" 
239             label="%Display.label" 
240             menubarPath="additions" 
241             icon="icons/full/ctool16/disp_sbook.gif"
242             helpContextId="display_action_context"
243             class="org.eclipse.jdt.internal.debug.ui.actions.DisplayAction"> 
244             </action> 
245                     <action id="org.eclipse.jdt.debug.ui.cuPopup.Inspect" 
246             label="%Inspect.label" 
247             menubarPath="additions" 
248             icon="icons/full/ctool16/insp_sbook.gif"
249             helpContextId="inspect_action_context"
250             class="org.eclipse.jdt.internal.debug.ui.actions.InspectAction"> 
251             </action>
252                  </viewerContribution>
253 jwright 1.1      <viewerContribution 
254                 id="org.eclipse.jdt.debug.ui.CFPopupActions" 
255                 targetID="#ClassFileEditorContext">
256                 <action id="org.eclipse.jdt.debug.ui.cfPopup.RunToLine"
257                 icon="icons/full/clcl16/runtoline_co.gif"
258                 label="%runToLineAction.label"
259                 menubarPath="additions"
260                  helpContextId="run_to_line_action_context"
261                 class="org.eclipse.jdt.internal.debug.ui.actions.RunToLineActionDelegate"> 
262             </action> 
263                 <action id="org.eclipse.jdt.debug.ui.cfPopup.Display" 
264             label="%Display.label" 
265             menubarPath="additions"
266             icon="icons/full/ctool16/disp_sbook.gif"
267             helpContextId="display_action_context"
268             class="org.eclipse.jdt.internal.debug.ui.actions.DisplayAction"> 
269             </action> 
270                     <action id="org.eclipse.jdt.debug.ui.cfPopup.Inspect" 
271             label="%Inspect.label" 
272             menubarPath="additions"
273             icon="icons/full/ctool16/insp_sbook.gif"
274 jwright 1.1 helpContextId="inspect_action_context"
275             class="org.eclipse.jdt.internal.debug.ui.actions.InspectAction"> 
276             </action> 
277                  </viewerContribution>
278             
279             The class ManageBreakpointRulerAction (and ManageBreakpointActionDelegate ?) is/are quite
280             relevant to managing FragmentMarkers in the VSF Editor.
281             
282             --------------------------------------
283             
284             Note re: Marker Assocations and type hierarchy
285             
286             It will probably be useful to define several marker subtypes
287             FragmentMarker
288             /\
289             VSFFragmentMarkerJavaFragmentMarker
290             
291             JavaFragmentMarkers would be placed in Java source files, 
292             denoting methods or other 'source' fragments of interest.
293             They are not necessarily displayed to the user
294             
295 jwright 1.1 VSFFragmentMarkers are used in the VSFEditor.  They denote fragment
296             boundaries *and* provide linkage back to the corresponding source fragment.
297             Within a single VSF file, there would be a 1:1 association between
298             a VSFFragmentMarker and the corresponding (source) JavaFragmentMarker.
299             Across multiple VSF files, the association could be N:1, since multiple VSF
300             files could reference the same JavaFragment.
301             Note: a VSFFragment could be associated with some other type of fragment (email,
302             design/spec doc, whatever).
303             
304             ============================
305             Arrgh!  ...ui.texteditor provides a number of classes for supporting Marker actions in the ruler and elsewhere.
306             We probably don't need to reinvent the wheel --
307             
308             resource bundle keys (prepended with 'prefix', if given):
309             'label' - setText
310             'tooltip' - setToolTipText
311             'image'- setImageDescriptor
312             'description' - setDescription
313             
314             See ResourceAction for details --
315             
316 jwright 1.1 Likely subclasses include:
317             MarkerRulerAction
318             - adds/removes markers which are displayed in the ruler
319             
320             SelectMarkerRulerAction (to specify range ???)
321             - select textual range of a marker w/ visual representation in the ruler
322             
323             AddMarkerAction - create marker based on __selection__ in editor; optionally prompting for marker label.
324             additional keys:
325             dialog.title- title of input dialog
326             dialog.message  - message for input dialog
327             error.dialog.title- title of error dialog
328             error.dialog.message  - message for error dialog
329             
330             Note: AddMarkerAction javadoc discourages subclassing - but AddTaskAction, AddClassFileMarkerAction
331               both subclass... (e.g. to specify marker type, use a different popup dialog, supply
332               additional/other information...)
333               
334              
335              SelectMarkerRulerAction does not look too useful, after reading the code.
336              It's pegged to TASK and PROBLEM marker types, and seems designed to cause
337 jwright 1.1  the relevant editor or task list to display the selection associated with the marker.
338              
339              MarkerRulerAction is also useful: it adds/removes marker based on clicking in ruler.
340              
341              NOTE: Marker creation uses initial attributes specified in a resource bundle,
342              possibly qualified with a prefix.
343              The keys used are defined in IMarker:
344              CHAR_END
345              CHAR_START
346              DONE
347              LINE_NUMBER
348              LOCATION
349              MESSAGE
350              PRIORITY
351              SEVERITY
352              Of course, user-defined markers can have additional attributes, and the attributes
353              actually applied depend on the marker type created.
354             
355             To use MarkerRulerAction (in a ruler), several things are required.
356             
357             a) create delegate subclass extending AbstractRulerActionDelegate,
358 jwright 1.1    with a createAction method that returns a MarkerRulerAction (or subclass, if necessary)
359                
360             b) Add a popupMenus viewerContribution extension (in plugin.xml),
361                with id="org.eclipse.ui.texteditor.ruler.context.actions",
362                declaring the delegate subclass created per (a)
363             
364             Here is workbench UI xml for the stock text editor:
365             
366                <extension
367                      point="org.eclipse.ui.popupMenus">         
368               <viewerContribution 
369                     id="org.eclipse.ui.texteditor.ruler.context.actions" 
370                         targetID="#TextRulerContext">
371              <action
372                         id="org.eclipse.ui.texteditor.TaskRulerAction"
373                 label="%AddTask.label"
374                 tooltip="%AddTask.tooltip"
375                 helpContextId="org.eclipse.ui.AddTask_action_context"
376                 menubarPath="additions"
377                 class="org.eclipse.ui.texteditor.TaskRulerAction">
378                      </action>
379 jwright 1.1          <action
380                         id="org.eclipse.ui.texteditor.BookmarkRulerAction"
381                         label="%AddBookmark.label"
382                         tooltip="%AddBookmark.tooltip"
383                 helpContextId="org.eclipse.ui.bookmark_action_context"
384                         menubarPath="additions"
385                         class="org.eclipse.ui.texteditor.BookmarkRulerAction">
386                      </action>
387               </viewerContribution>     
388                </extension>
389              
390             This adds two actions to the ruler popup, restricted by 'targetID'.
391             For the VSF editor, only one action is needed; it should specify
392             VSF_FragmentRulerActionDelegate as the class. 
393             
394             Hmm.  Tried it.  Markers are (apparently) being added, but they are not
395             visible.  Maybe I need the 'image' tag after all!
help@eclipse.org
Powered by
ViewCVS 0.7